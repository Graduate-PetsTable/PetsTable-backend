name: Java CD with Gradle and Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-20.04
    env:
      working-directory: ./
      APPLICATION: ${{ secrets.APPLCATION_SECRET_YML }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create fcm config
        env:
          DATA: ${{ secrets.FIREBASE_CONFIG }}
        run: |
          mkdir -p ./src/main/resources/firebase
          echo $DATA > ./src/main/resources/firebase/firebaseConfig.json
          cat ./src/main/resources/firebase/firebaseConfig.json
          chmod 400 ./src/main/resources/firebase/firebaseConfig.json

      - name: Create application.yml And Apple Client Private Key
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml
          
          mkdir -p ./src/main/resources/static/apple
          echo "${{ secrets.APPLE_CLIENT_PRIVATE_KEY }}" > ./src/main/resources/static/apple/AuthKey_429GC4ZPQU.p8
          cat ./src/main/resources/static/apple/AuthKey_429GC4ZPQU.p8
          chmod 400 ./src/main/resources/static/apple/AuthKey_429GC4ZPQU.p8

      - name: Upload application.yml
        uses: actions/upload-artifact@v4
        with:
          name: application.yml
          path: ./src/main/resources/application.yml

      - name: Upload fcm config
        uses: actions/upload-artifact@v4
        with:
          name: dogreceipe-72f1e-firebase-adminsdk-dg78f-618c87953b.json
          path: ./src/main/resources/firebase/firebaseConfig.json

      - name: Upload apple client private key
        uses: actions/upload-artifact@v4
        with:
          name: AuthKey_429GC4ZPQU.p8
          path: ./src/main/resources/static/apple/AuthKey_429GC4ZPQU.p8

      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission and build with Gradle (without Test)
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test --parallel --build-cache --daemon --stacktrace
        working-directory: ${{ env.working-directory }}

      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} -f Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to Prod WAS Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.WAS_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker stop app-container || true
            sudo docker rm app-container || true
            sudo docker run -d -p 8080:8080 --name dogkerTest --network ${{ secrets.WAS_NETWORK }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO}}
            sudo docker image prune -f