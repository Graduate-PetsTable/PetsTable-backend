name: Java CD with Gradle and Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create application-oauth.yml
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.OAUTH_YML }}" > ./application-oauth.yml
        shell: bash


      - name: Create application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "${{ secrets.YML_DEV }}" > ./application.yml
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.YML_PROD }}" > ./application.yml
          fi
        shell: bash

      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --parallel --build-cache --daemon --stacktrace

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} -f Dockerfile .
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to Prod WAS Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.WAS_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d -p 8080:8080 --network ${{ secrets.WAS_NETWORK }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker image prune -f